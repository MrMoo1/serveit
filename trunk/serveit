#!/usr/bin/env python

import optparse
import BaseHTTPServer
import SocketServer
import shutil
import os
import os.path
import urlparse

usage = "usage: %prog [options] [files]"

class ThreadedHTTPServer(SocketServer.ThreadingMixIn,
						 BaseHTTPServer.HTTPServer):
	pass


class RequestHandler(BaseHTTPServer.BaseHTTPRequestHandler):
	def do_GET(self):
		path = urlparse.urlparse(self.path)[2].lstrip("/")
		if path == "":
			self.sendRootListing()
		else:
			for fName in self.files:
				if path.startswith(fName):
					if os.path.isdir(path):
						self.sendDirectoryListing(path)
					else:
						self.sendFile(path)
					break
			else:
				self.send404()

	def sendFile(self, path):
		self.send_response(200)
		self.send_header("Content-type", "application/octet-stream")
		self.send_header("Content-Length", os.path.getsize(path))
		self.end_headers()
		f = open(path, 'rb')
		shutil.copyfileobj(f, self.wfile)
		f.close()

	def send404(self):
		self.send_error(404, "File not found")

	def sendRootListing(self):
		self.sendListing(self.files, self.files)
		
	def sendDirectoryListing(self, path):
		dirList = os.listdir(path)
		paths = [os.path.join(path, fName) for fName in dirList]
		dirList = [(fName + '/') if os.path.isdir(path) else fName
				   for fName, path in zip(dirList, paths)]
		self.sendListing(dirList, dirList,
						 "Directory listing for %s" % path)

	def sendListing(self, names, paths, title=''):
		lines = []
		
		lines.append("<html>")
		lines.append("  <head>")
		lines.append("    <title>%s</title>" % title)
		lines.append("  </head>")
		lines.append("  <body>")
		if title:
			lines.append("    <h1>%s</h1>" % title)
		lines.append("    <hr/>")
		lines.append("    <ul>")
		for name, path in zip(names, paths):
			lines.append("      <li><a href=\"%s\">%s</a></li>" % (path, name))
		lines.append("    </ul>")
		lines.append("    <hr/>")
		lines.append("  </body>")
		lines.append("</html>")
		
		listing =  '\n'.join(lines)
		
		self.send_response(200)
		self.send_header("Content-type", "text/html")
		self.send_header("Content-Length", len(listing))
		self.end_headers()
		self.wfile.write(listing)


def main():
	parser = optparse.OptionParser(usage=usage)
	parser.add_option("-p", "--port",
					  dest="port",
					  default=80,
					  metavar="PORT",
					  help="Serve the files from PORT. (Default 80)")
	
	(options, files) = parser.parse_args()
	
	serve(files, int(options.port))

def serve(files, port):
	print "serving", files, "on", port
	address = ('', port)
	RequestHandler.files = files
	httpd = ThreadedHTTPServer(address, RequestHandler)
	try:
		httpd.serve_forever()
	except KeyboardInterrupt:
		print "Done."

if __name__ == "__main__":
	main()
